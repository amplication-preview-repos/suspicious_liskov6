/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { IoTDataService } from "../ioTData.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { IoTDataCreateInput } from "./IoTDataCreateInput";
import { IoTData } from "./IoTData";
import { IoTDataFindManyArgs } from "./IoTDataFindManyArgs";
import { IoTDataWhereUniqueInput } from "./IoTDataWhereUniqueInput";
import { IoTDataUpdateInput } from "./IoTDataUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class IoTDataControllerBase {
  constructor(
    protected readonly service: IoTDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IoTData })
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createIoTData(
    @common.Body() data: IoTDataCreateInput
  ): Promise<IoTData> {
    return await this.service.createIoTData({
      data: {
        ...data,

        device: data.device
          ? {
              connect: data.device,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        data: true,

        device: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [IoTData] })
  @ApiNestedQuery(IoTDataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ioTDataItems(@common.Req() request: Request): Promise<IoTData[]> {
    const args = plainToClass(IoTDataFindManyArgs, request.query);
    return this.service.ioTDataItems({
      ...args,
      select: {
        createdAt: true,
        data: true,

        device: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IoTData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ioTData(
    @common.Param() params: IoTDataWhereUniqueInput
  ): Promise<IoTData | null> {
    const result = await this.service.ioTData({
      where: params,
      select: {
        createdAt: true,
        data: true,

        device: {
          select: {
            id: true,
          },
        },

        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IoTData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateIoTData(
    @common.Param() params: IoTDataWhereUniqueInput,
    @common.Body() data: IoTDataUpdateInput
  ): Promise<IoTData | null> {
    try {
      return await this.service.updateIoTData({
        where: params,
        data: {
          ...data,

          device: data.device
            ? {
                connect: data.device,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          data: true,

          device: {
            select: {
              id: true,
            },
          },

          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IoTData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteIoTData(
    @common.Param() params: IoTDataWhereUniqueInput
  ): Promise<IoTData | null> {
    try {
      return await this.service.deleteIoTData({
        where: params,
        select: {
          createdAt: true,
          data: true,

          device: {
            select: {
              id: true,
            },
          },

          id: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
