/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { IoTData } from "./IoTData";
import { IoTDataCountArgs } from "./IoTDataCountArgs";
import { IoTDataFindManyArgs } from "./IoTDataFindManyArgs";
import { IoTDataFindUniqueArgs } from "./IoTDataFindUniqueArgs";
import { CreateIoTDataArgs } from "./CreateIoTDataArgs";
import { UpdateIoTDataArgs } from "./UpdateIoTDataArgs";
import { DeleteIoTDataArgs } from "./DeleteIoTDataArgs";
import { Device } from "../../device/base/Device";
import { IoTDataService } from "../ioTData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IoTData)
export class IoTDataResolverBase {
  constructor(
    protected readonly service: IoTDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "read",
    possession: "any",
  })
  async _ioTDataItemsMeta(
    @graphql.Args() args: IoTDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IoTData])
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "read",
    possession: "any",
  })
  async ioTDataItems(
    @graphql.Args() args: IoTDataFindManyArgs
  ): Promise<IoTData[]> {
    return this.service.ioTDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IoTData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "read",
    possession: "own",
  })
  async ioTData(
    @graphql.Args() args: IoTDataFindUniqueArgs
  ): Promise<IoTData | null> {
    const result = await this.service.ioTData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IoTData)
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "create",
    possession: "any",
  })
  async createIoTData(
    @graphql.Args() args: CreateIoTDataArgs
  ): Promise<IoTData> {
    return await this.service.createIoTData({
      ...args,
      data: {
        ...args.data,

        device: args.data.device
          ? {
              connect: args.data.device,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IoTData)
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "update",
    possession: "any",
  })
  async updateIoTData(
    @graphql.Args() args: UpdateIoTDataArgs
  ): Promise<IoTData | null> {
    try {
      return await this.service.updateIoTData({
        ...args,
        data: {
          ...args.data,

          device: args.data.device
            ? {
                connect: args.data.device,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IoTData)
  @nestAccessControl.UseRoles({
    resource: "IoTData",
    action: "delete",
    possession: "any",
  })
  async deleteIoTData(
    @graphql.Args() args: DeleteIoTDataArgs
  ): Promise<IoTData | null> {
    try {
      return await this.service.deleteIoTData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Device, {
    nullable: true,
    name: "device",
  })
  @nestAccessControl.UseRoles({
    resource: "Device",
    action: "read",
    possession: "any",
  })
  async getDevice(@graphql.Parent() parent: IoTData): Promise<Device | null> {
    const result = await this.service.getDevice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
